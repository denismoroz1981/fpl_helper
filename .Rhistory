shiny::runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
head(db_PLplayersBest)
head(db_PLplayersSelect)
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
db_PLplayersBest
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
?Sys.time
Sys.time()
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
runApp('/srv/shiny-server/fantasyPL')
install.packages("manipulate")
#power
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial
= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
install.packages("ggplot2")
#power
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial
= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
?ggplot
??ggplot
#power
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial
= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
#power
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial
= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
#power
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
#power
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
#power
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
require("manipulate")
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
source('~/Documents/R exercises/power.R')
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
#power
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
dev.list()
#power
library(manipulate)
library(ggplot2)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
dev.off()
shiny::runApp('/srv/shiny-server/fantasyPL')
names(db_PLplayersGEN)
db_PLplayersGEN$season<-"2017/2018"
names(db_PLplayersGEN)
preprocTable<-function(dataTable,season) {
db_PLplayersProc<-data.frame(dataTable[2])
db_teams<-data.frame(dataTable$teams[c("code","short_name")])
# addition of position and team names instead of codes
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_teams,by.x="elements.team_code",by.y = "code",all.x = TRUE)
db_positions<-data.frame(c(1,2,3,4),c("Goalkeeper","Defender","Midfielder","Forward"))
names(db_positions)<-c("elements.element_type","position")
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_positions,by="elements.element_type",all.x = TRUE)
# change of colunm names
colnames(db_PLplayersProc)<-sub("elements.","",colnames(db_PLplayersProc))
#colnames(db_PLplayersGEN)[colnames(db_PLplayersGEN)=="elements.web_name"]<-"web_name"
#cost is divided by 10
db_PLplayersProc$now_cost<-db_PLplayersProc$now_cost/10
db_PLplayersProc$points_per_million<-db_PLplayersProc$total_points/db_PLplayersProc$now_cost
db_PLplayersProc$season<-season
}
db_PLplayers2017<-preprocTable(db_PL,"2016/2017") #processing 2016/2017 statistics
head(db_PLplayers2017)
preprocTable<-function(dataTable,season) {
db_PLplayersProc<-data.frame(dataTable[2])
db_teams<-data.frame(dataTable$teams[c("code","short_name")])
# addition of position and team names instead of codes
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_teams,by.x="elements.team_code",by.y = "code",all.x = TRUE)
db_positions<-data.frame(c(1,2,3,4),c("Goalkeeper","Defender","Midfielder","Forward"))
names(db_positions)<-c("elements.element_type","position")
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_positions,by="elements.element_type",all.x = TRUE)
# change of colunm names
colnames(db_PLplayersProc)<-sub("elements.","",colnames(db_PLplayersProc))
#colnames(db_PLplayersGEN)[colnames(db_PLplayersGEN)=="elements.web_name"]<-"web_name"
#cost is divided by 10
db_PLplayersProc$now_cost<-db_PLplayersProc$now_cost/10
db_PLplayersProc$points_per_million<-db_PLplayersProc$total_points/db_PLplayersProc$now_cost
db_PLplayersProc$season<-season
return(db_PLplayersProc)
}
db_PLplayers2017<-preprocTable(db_PL,"2016/2017") #processing 2016/2017 statistics
names(db_PLplayers2017)
db_PLplayers2017<-fromJSON("FPL_stat_2016-2017.json")
db_PLplayers2017<-fromJSON("FPL_stat_2016_2017.json")
db_PLplayers2017<-fromJSON(file="FPL_stat_2016_2017.json")
?fromJSON
db_PLplayers2017<-fromJSON(txt="FPL_stat_2016_2017.json")
db_PLplayers2017<-fromJSON(txt="FPL_stat_2016_2017.json")
db_PLplayers2017<-fromJSON(FPL_stat_2016_2017.json)
db_PLplayers2017<-fromJSON("FPL_stat_2016_2017.json")
db_PLplayers2017<-fromJSON('FPL_stat_2016_2017.json')
db_PLplayers2017<-fromJSON('FPL_stat_2016_2017.json')
db_PLplayers2017<-fromJSON('stat_2016_2017.json')
runApp('/srv/shiny-server/fantasyPL')
filename<-"stat_2016_2017.json"
db_PLplayers2017<-fromJSON(filename)
db_PLplayers2017<-fromJSON("2016_2017.json")
write(toJSON("2016_2017.json"),"2016_2017.json")
db_PLplayers2017<-fromJSON("2016_2017.json")
?write
db_PLplayers2017<-fromJSON(file="2016_2017.json")
db_PLplayers2017<-fromJSON(txt = "2016_2017.json")
head(db_PLplayers2017)
db_PLplayers2017<-fromJSON(txt = "stat2016_2017.json")
install.packages("rjson")
db_PLplayers2017<-fromJSON(txt = "stat2016_2017.json")
db_PLplayers2017<-rjson::fromJSON(txt = "stat2016_2017.json")
db_PLplayers2017<-rjson::fromJSON("stat2016_2017.json")
library(rjson)
db_PLplayers2017<-rjson::fromJSON("stat2016_2017.json")
db_PLplayers2017<-fromJSON("stat2016_2017.json")
link<-getURL("stat2016-2017.json")
install.packages("RJSONIO")
library(RJSONIO)
db_PLplayers2017<-rjson::fromJSON("stat2016_2017.json")
db_PLplayers2017<-RJSONIO::fromJSON("stat2016_2017.json")
?RJSONIO::fromJSON
db_PLplayers2017<-RJSONIO::fromJSON(content = "stat2016_2017.json")
con<-file("stat2016_2017.","con")
?file
con<-file("stat2016_2017.","con")
con<-file("stat2016_2017.json","con")
getwd()
setwd(/srv/shiny-server/fantasyPL)
setwd("/srv/shiny-server/fantasyPL")
fileTable<-file("stat2016_2017.json")
db_PLplayers2017<-fromJSON(fileTable)
fileTable<-file("stat2016_2017.json")
db_PLplayers2017<-fromJSON(fileTable)
fileTable<-file("stat2016_2017.json")
db_PLplayers2017<-fromJSON(fileTable)
fileTable<-file.path("stat2016_2017.json")
db_PLplayers2017<-fromJSON(fileTable)
#Fantasy Premier League
#Adding libraries
library(shiny)
library(RCurl)
library(jsonlite)
library(ggplot2)
#library(beepr)
#Sourcing current data
link<-getURL("https://fantasy.premierleague.com/drf/bootstrap-static")
db_PL <-fromJSON(link)
#Sourcing 2016/2017 data
fileTable<-file.path("stat2016_2017.json")
db_PLplayers2017<-fromJSON(fileTable)
#Preprocessing data table
preprocTable<-function(dataTable,season) {
db_PLplayersProc<-data.frame(dataTable[2])
db_teams<-data.frame(dataTable$teams[c("code","short_name")])
# addition of position and team names instead of codes
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_teams,by.x="elements.team_code",by.y = "code",all.x = TRUE)
db_positions<-data.frame(c(1,2,3,4),c("Goalkeeper","Defender","Midfielder","Forward"))
names(db_positions)<-c("elements.element_type","position")
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_positions,by="elements.element_type",all.x = TRUE)
# change of colunm names
colnames(db_PLplayersProc)<-sub("elements.","",colnames(db_PLplayersProc))
#colnames(db_PLplayersGEN)[colnames(db_PLplayersGEN)=="elements.web_name"]<-"web_name"
#cost is divided by 10
db_PLplayersProc$now_cost<-db_PLplayersProc$now_cost/10
db_PLplayersProc$points_per_million<-db_PLplayersProc$total_points/db_PLplayersProc$now_cost
db_PLplayersProc$season<-season
return(db_PLplayersProc)
}
db_PLplayers2018<-preprocTable(db_PL,"2017/2018") #processing 2017/2018 statistics
db_PLplayers2017<-preprocTable(db_PLplayers2017,"2016/2017") #processing 2017/2018 statistic
#Fantasy Premier League
#Adding libraries
library(shiny)
library(RCurl)
library(jsonlite)
library(ggplot2)
#library(beepr)
#Sourcing current data
link<-getURL("https://fantasy.premierleague.com/drf/bootstrap-static")
db_PL <-fromJSON(link)
#Sourcing 2016/2017 data
fileTable<-file.path("stat2016_2017.json")
db_PLplayers2017<-fromJSON(fileTable)
#Preprocessing data table
preprocTable<-function(dataTable,season) {
db_PLplayersProc<-data.frame(dataTable[2])
db_teams<-data.frame(dataTable$teams[c("code","short_name")])
# addition of position and team names instead of codes
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_teams,by.x="elements.team_code",by.y = "code",all.x = TRUE)
db_positions<-data.frame(c(1,2,3,4),c("Goalkeeper","Defender","Midfielder","Forward"))
names(db_positions)<-c("elements.element_type","position")
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_positions,by="elements.element_type",all.x = TRUE)
# change of colunm names
colnames(db_PLplayersProc)<-sub("elements.","",colnames(db_PLplayersProc))
#colnames(db_PLplayersGEN)[colnames(db_PLplayersGEN)=="elements.web_name"]<-"web_name"
#cost is divided by 10
db_PLplayersProc$now_cost<-db_PLplayersProc$now_cost/10
db_PLplayersProc$points_per_million<-db_PLplayersProc$total_points/db_PLplayersProc$now_cost
db_PLplayersProc$season<-season
return(db_PLplayersProc)
}
db_PLplayers2018<-preprocTable(db_PL,"2017/2018") #processing 2017/2018 statistics
db_PLplayers2017<-preprocTable(db_PLplayers2017,"2016/2017") #processing 2017/2018 statistic
t<-data.frame(db_PLplayers2018)
runApp()
preprocTable<-function(dataTable,season) {
browser()
db_PLplayersProc<-data.frame(dataTable[2])
db_teams<-data.frame(dataTable$teams[c("code","short_name")])
# addition of position and team names instead of codes
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_teams,by.x="elements.team_code",by.y = "code",all.x = TRUE)
db_positions<-data.frame(c(1,2,3,4),c("Goalkeeper","Defender","Midfielder","Forward"))
names(db_positions)<-c("elements.element_type","position")
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_positions,by="elements.element_type",all.x = TRUE)
# change of colunm names
colnames(db_PLplayersProc)<-sub("elements.","",colnames(db_PLplayersProc))
#colnames(db_PLplayersGEN)[colnames(db_PLplayersGEN)=="elements.web_name"]<-"web_name"
#cost is divided by 10
db_PLplayersProc$now_cost<-db_PLplayersProc$now_cost/10
db_PLplayersProc$points_per_million<-db_PLplayersProc$total_points/db_PLplayersProc$now_cost
db_PLplayersProc$season<-season
return(db_PLplayersProc)
}
db_PLplayers2018<-preprocTable(db_PL,"2017/2018") #processing 2017/2018 statistics
db_PLplayers2017<-preprocTable(db_PLplayers2017,"2016/2017") #processing 2016/2017
preprocTable<-function(dataTable) {
browser()
db_PLplayersProc<-data.frame(dataTable[2])
db_teams<-data.frame(dataTable$teams[c("code","short_name")])
# addition of position and team names instead of codes
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_teams,by.x="elements.team_code",by.y = "code",all.x = TRUE)
db_positions<-data.frame(c(1,2,3,4),c("Goalkeeper","Defender","Midfielder","Forward"))
names(db_positions)<-c("elements.element_type","position")
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_positions,by="elements.element_type",all.x = TRUE)
# change of colunm names
colnames(db_PLplayersProc)<-sub("elements.","",colnames(db_PLplayersProc))
#colnames(db_PLplayersGEN)[colnames(db_PLplayersGEN)=="elements.web_name"]<-"web_name"
#cost is divided by 10
db_PLplayersProc$now_cost<-db_PLplayersProc$now_cost/10
db_PLplayersProc$points_per_million<-db_PLplayersProc$total_points/db_PLplayersProc$now_cost
#b_PLplayersProc$season<-season
return(db_PLplayersProc)
}
db_PLplayers2018<-preprocTable(db_PL) #processing 2017/2018 statistics
db_PLplayers2017<-preprocTable(db_PLplayers2017) #processing 2016/2017 statistic
preprocTable<-function(dataTable) {
db_PLplayersProc<-data.frame(dataTable[2])
db_teams<-data.frame(dataTable$teams[c("code","short_name")])
# addition of position and team names instead of codes
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_teams,by.x="elements.team_code",by.y = "code",all.x = TRUE)
db_positions<-data.frame(c(1,2,3,4),c("Goalkeeper","Defender","Midfielder","Forward"))
names(db_positions)<-c("elements.element_type","position")
db_PLplayersProc<-merge(x=db_PLplayersProc,y=db_positions,by="elements.element_type",all.x = TRUE)
# change of colunm names
colnames(db_PLplayersProc)<-sub("elements.","",colnames(db_PLplayersProc))
#colnames(db_PLplayersGEN)[colnames(db_PLplayersGEN)=="elements.web_name"]<-"web_name"
#cost is divided by 10
db_PLplayersProc$now_cost<-db_PLplayersProc$now_cost/10
db_PLplayersProc$points_per_million<-db_PLplayersProc$total_points/db_PLplayersProc$now_cost
#b_PLplayersProc$season<-season
return(db_PLplayersProc)
}
db_PLplayers2018<-preprocTable(db_PL) #processing 2017/2018 statistics
db_PLplayers2017<-preprocTable(db_PLplayers2017) #processing 2016/2017 statistic
exists()
quit()
stop()
runApp()
q
ls(rm=ls)
rm(list=ls)
rm(list=ls())
rm()
cleanup
runApp()
View(database)
